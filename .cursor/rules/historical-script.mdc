---
description: 
globs: 
alwaysApply: false
---
# Historical Data Script

This script, `[src/historical.ts](mdc:src/historical.ts)`, provides functionality to fetch and process data from past dates or date ranges, separate from the continuous operation managed by `[src/index.ts](mdc:src/index.ts)`.

## Purpose

*   Backfill data for specific dates or periods.
*   Generate summaries for past dates.
*   Test source plugins' historical fetching capabilities.

## Execution

Run via Node.js:
`node dist/historical.js [arguments]` (assuming compiled code is in `dist/`)

## Key Differences from `index.ts`

*   **Entry Point:** `src/historical.ts` vs `src/index.ts`.
*   **Aggregator:** Uses `[HistoricalAggregator](mdc:src/aggregator/HistoricalAggregator.ts)` which specifically handles date/range-based fetching, vs `ContentAggregator` for continuous fetching.
*   **Source Requirement:** Only registers source plugins that explicitly implement a `fetchHistorical` method.
*   **Date Arguments:** Accepts command-line arguments for specifying dates:
    *   `--date=YYYY-MM-DD`: Fetch for a single specific date.
    *   `--before=YYYY-MM-DD`: Fetch data *before* this date (exclusive).
    *   `--after=YYYY-MM-DD`: Fetch data *after* this date (exclusive).
    *   `--during=YYYY-MM-DD`: Fetch data *during* this date (equivalent to --date).
    *   Can combine `--before` and `--after` for a range.
*   **Date Handling:** Uses helpers from `[src/helpers/dateHelper.ts](mdc:src/helpers/dateHelper.ts)` (`parseDate`, `callbackDateRangeLogic`) to manage date filtering and iteration.
*   **Operation Mode:** Runs once to fetch/generate for the specified dates and then exits. It does not use `setInterval` for continuous operation.
*   **Summary Generation:** If not using `--onlyFetch`, it generates summaries for the specified date(s) using `generator.instance.generateAndStoreSummary(dateStr)`. For ranges, it iterates through each date in the range.

## Workflow

1.  Parse arguments (source config, date filters, output path, onlyFetch).
2.  Load plugins and configuration (similar to `index.ts`).
3.  Initialize `HistoricalAggregator`.
4.  Register sources with `fetchHistorical`, enrichers, and storage.
5.  Determine the date filter (`DateConfig` object) based on arguments.
6.  Call `aggregator.fetchAndStore(sourceName, date)` or `aggregator.fetchAndStoreRange(sourceName, filter)` for each registered source.
7.  If `onlyFetch` is false:
    *   Iterate through the date(s) using `callbackDateRangeLogic` if needed.
    *   Call `generator.generateAndStoreSummary(date)` for each relevant generator and date.
8.  Close storage connections and exit.
