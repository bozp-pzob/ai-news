name: Hyperfy Discord

on:
  schedule:
    - cron: '30 23 * * *' # Run at 11:30 PM UTC every day
  workflow_dispatch: # Allows manual triggering
    inputs:
      after_date:
        description: 'Start date (YYYY-MM-DD)'
        required: false
        type: string
      before_date:
        description: 'End date (YYYY-MM-DD)'
        required: false
        type: string
      force_overwrite:
        description: 'Force overwrite existing data'
        required: false
        type: boolean
        default: false

jobs:
  sqlite-job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for checkout and gh-pages push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Fetch existing DB from gh-pages branch if it exists
      - name: Check and fetch database (hyperfy-discord.sqlite.enc)
        run: |
          mkdir -p data
          
          # Check if gh-pages branch exists on remote
          echo "Checking if gh-pages branch exists on remote..."
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "‚úÖ gh-pages branch exists, attempting to fetch database"
            
            # Fetch gh-pages branch with proper error handling
            if git fetch origin gh-pages:gh-pages --depth=1; then
              echo "‚úÖ Successfully fetched gh-pages branch"
              
              # Check if encrypted database exists in the branch
              if git ls-tree -r --name-only gh-pages | grep -q "data/hyperfy-discord.sqlite.enc"; then
                echo "üì¶ Found encrypted database, attempting to restore..."
                
                # Extract database file with validation
                if git show gh-pages:data/hyperfy-discord.sqlite.enc > data/hyperfy-discord.sqlite.enc; then
                  # Verify the file was created and has content
                  if [ -f "data/hyperfy-discord.sqlite.enc" ] && [ -s "data/hyperfy-discord.sqlite.enc" ]; then
                    echo "‚úÖ Successfully restored encrypted database ($(wc -c < data/hyperfy-discord.sqlite.enc) bytes)"
                  else
                    echo "‚ùå Error: Database file was not properly extracted"
                    exit 1
                  fi
                else
                  echo "‚ùå Error: Failed to extract database from gh-pages branch"
                  exit 1
                fi
              else
                echo "‚ÑπÔ∏è  No existing database found in gh-pages branch - will start with empty database"
              fi
            else
              echo "‚ùå Error: Failed to fetch gh-pages branch"
              echo "This could indicate a network issue or repository access problem"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  gh-pages branch does not exist yet - will be created on first deployment"
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v4 # Updated version
        with:
          node-version: '23'
          
      - name: Process secrets securely
        run: |
          echo '${{ secrets.ENV_SECRETS }}' > env_secrets.json # Using ENV_SECRETS, adjust if needed
          chmod 600 env_secrets.json
          
          # Mask values
          jq -r 'to_entries[] | .value' env_secrets.json | while read -r value; do
            if [ -n "$value" ]; then
              echo "::add-mask::$value"
            fi
          done
          
          # Set environment variables
          jq -r 'to_entries[] | "\(.key)=\(.value)"' env_secrets.json > env_vars.txt
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < env_vars.txt
          
          # Clean up
          rm env_secrets.json env_vars.txt
      
      - name: Install dependencies
        run: npm install
      
      - name: Decrypt database (if exists)
        env:
          SQLITE_ENCRYPTION_KEY: ${{ secrets.SQLITE_ENCRYPTION_KEY }}
        run: |
          # Mask the encryption key to prevent accidental logging
          echo "::add-mask::$SQLITE_ENCRYPTION_KEY"
          if [ -f "data/hyperfy-discord.sqlite.enc" ]; then
            if [ -z "$SQLITE_ENCRYPTION_KEY" ]; then
              echo "Error: SQLITE_ENCRYPTION_KEY secret is not set."
              exit 1
            fi
            echo "Decrypting data/hyperfy-discord.sqlite.enc..."
            openssl enc -d -aes-256-cbc -pbkdf2 -in data/hyperfy-discord.sqlite.enc -out data/hyperfy-discord.sqlite -k "$SQLITE_ENCRYPTION_KEY"
            if [ $? -ne 0 ]; then
              echo "Error: Decryption failed. Check the encryption key or file integrity."
              rm data/hyperfy-discord.sqlite
              exit 1
            fi
            echo "Decryption successful."

            # Check database integrity
            echo "Checking database integrity..."
            if command -v sqlite3 &> /dev/null; then
              sqlite3 data/hyperfy-discord.sqlite "PRAGMA integrity_check;"
              if [ $? -ne 0 ]; then
                echo "Error: Database integrity check failed! The decrypted file might be corrupted."
                rm data/hyperfy-discord.sqlite
                exit 1 # Exit if integrity check fails
              else
                 echo "Database integrity check passed."
              fi
            else
              echo "Warning: sqlite3 command not found. Skipping integrity check."
            fi
            rm data/hyperfy-discord.sqlite.enc
          else
            echo "No encrypted database found to decrypt."
          fi
      
      - name: Get yesterday's date
        id: date
        run: echo "YESTERDAY=$(date -d "yesterday" +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Run historical generation
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.after_date }}" ] && [ -n "${{ inputs.before_date }}" ]; then
              npm run historical -- --source=hyperfy-discord.json --after=${{ inputs.after_date }} --before=${{ inputs.before_date }} --output=./output/hyperfy
            elif [ -n "${{ inputs.after_date }}" ]; then
              npm run historical -- --source=hyperfy-discord.json --after=${{ inputs.after_date }} --output=./output/hyperfy
            elif [ -n "${{ inputs.before_date }}" ]; then
              npm run historical -- --source=hyperfy-discord.json --before=${{ inputs.before_date }} --output=./output/hyperfy
            else
              # Default to yesterday if no date inputs provided for manual run
              npm run historical -- --source=hyperfy-discord.json --date=${{ steps.date.outputs.YESTERDAY }} --output=./output/hyperfy
            fi
          else
            # Scheduled run uses yesterday's date
            npm run historical -- --source=hyperfy-discord.json --date=${{ steps.date.outputs.YESTERDAY }} --output=./output/hyperfy
          fi
        env:
          RUN_ONCE: true
          NODE_ENV: production
          FORCE_OVERWRITE: ${{ inputs.force_overwrite || 'false' }}

      - name: Encrypt database
        env:
          SQLITE_ENCRYPTION_KEY: ${{ secrets.SQLITE_ENCRYPTION_KEY }}
        run: |
          # Mask the encryption key to prevent accidental logging
          echo "::add-mask::$SQLITE_ENCRYPTION_KEY"
          if [ -f "data/hyperfy-discord.sqlite" ]; then
            if [ -z "$SQLITE_ENCRYPTION_KEY" ]; then
              echo "Error: SQLITE_ENCRYPTION_KEY secret is not set."
              exit 1
            fi
            echo "Encrypting data/hyperfy-discord.sqlite..."
            openssl enc -aes-256-cbc -salt -pbkdf2 -in data/hyperfy-discord.sqlite -out data/hyperfy-discord.sqlite.enc -k "$SQLITE_ENCRYPTION_KEY"
            if [ $? -ne 0 ]; then
              echo "Error: Encryption failed."
              exit 1
            fi
            echo "Encryption successful."
            rm data/hyperfy-discord.sqlite # Remove original
          else
            echo "No hyperfy-discord.sqlite found to encrypt."
          fi

      - name: Prepare files for deployment
        run: |
          YESTERDAY=${{ steps.date.outputs.YESTERDAY }}
          
          # Create target directories
          mkdir -p ./public/data
          mkdir -p ./public/hyperfy

          # Copy encrypted SQLite database
          if [ -f "data/hyperfy-discord.sqlite.enc" ]; then
            echo "Copying encrypted hyperfy-discord.sqlite.enc to ./public/data/"
            cp data/hyperfy-discord.sqlite.enc ./public/data/
          else
             echo "No encrypted hyperfy-discord.sqlite.enc found to copy."
          fi

          # Copy summary files with proper error handling
          echo "Copying summaries to ./public/hyperfy/"
          if [ -d "output/hyperfy/summaries" ] && [ "$(ls -A output/hyperfy/summaries 2>/dev/null)" ]; then
            if cp -r output/hyperfy/summaries/* ./public/hyperfy/; then
              echo "‚úÖ Successfully copied Hyperfy summary files"
            else
              echo "‚ùå Error: Failed to copy Hyperfy summary files"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  No Hyperfy summary files found to copy"
          fi

          # Create daily.json
          JSON_FILE="output/hyperfy/summaries/${YESTERDAY}.json"
          if [ -f "$JSON_FILE" ]; then
            echo "Copying $JSON_FILE to ./public/hyperfy/daily.json"
            cp "$JSON_FILE" ./public/hyperfy/daily.json
          else
            echo "Warning: Yesterday's JSON summary ($JSON_FILE) not found. Cannot create daily.json."
          fi
          
          # Create daily.md
          MD_FILE="output/hyperfy/summaries/${YESTERDAY}.md"
          if [ -f "$MD_FILE" ]; then
            echo "Copying $MD_FILE to ./public/hyperfy/daily.md"
            cp "$MD_FILE" ./public/hyperfy/daily.md
          else
            echo "Warning: Yesterday's MD summary ($MD_FILE) not found. Cannot create daily.md."
          fi

      - name: Validate JSON files
        run: find ./public/hyperfy -name "*.json" -type f -exec jq empty {} \; || { echo "Invalid JSON detected"; exit 1; } # Updated path

      - name: Get current timestamp for commit message
        id: commit_time
        run: echo "COMMIT_DATETIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Update Hyperfy data ${{ env.COMMIT_DATETIME }}"

